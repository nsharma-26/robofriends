{"version":3,"sources":["reportWebVitals.js","Card.js","CardList.js","Scroll.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","className","src","alt","CardList","robots","map","user","Scroll","props","style","overflowY","border","height","children","App","useState","searchRobot","setSearchRobot","setRobots","useEffect","a","axios","result","data","filterName","filter","robot","toLowerCase","includes","type","onChange","e","target","value","console","log","placeholder","ReactDOM","render","document","getElementById"],"mappings":"0KAYeA,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCSCQ,MAdf,YAAkC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAAOC,EAAK,EAALA,GAExB,OAEI,sBAAKC,UAAU,mDAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,WACpD,gCACI,6BAAKL,IACL,4BAAIC,WCOLK,EAfE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,8BAEQA,EAAOC,KAAI,SAACC,GACR,OACI,cAAC,EAAD,CAAoBP,GAAIO,EAAKP,GAAIF,KAAMS,EAAKT,KAAMC,MAAOQ,EAAKR,OAAnDQ,EAAKP,U,+BCEzBQ,MARf,SAAgBC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,SAAlE,SACKJ,EAAMK,Y,iBCmCJC,MAlCf,WAAe,IAAD,EAC4BC,mBAAS,IADrC,mBACHC,EADG,KACUC,EADV,OAEkBF,mBAAS,IAF3B,mBAEHX,EAFG,KAEKc,EAFL,KAIZC,oBAAS,sBAAC,4BAAAC,EAAA,sEACaC,IACnB,8CAFM,OACFC,EADE,OAKRJ,EAAUI,EAAOC,MALT,2CAMP,IAED,IAIMC,EAAapB,EAAOqB,QAAO,SAAAC,GAC7B,OAAOA,EAAM7B,KAAK8B,cAAcC,SAASZ,EAAYW,kBAErD,OACI,sBAAK3B,UAAU,KAAf,UACI,6CACA,qBAAKA,UAAU,MAAf,SACJ,uBAAO6B,KAAK,SAASC,SAXR,SAACC,GAClBd,EAAec,EAAEC,OAAOC,OACxBC,QAAQC,IAAInB,IASqCiB,MAAOjB,EAAaoB,YAAY,gBAAgBpC,UAAU,uCAEnG,cAAC,EAAD,UACI,cAAC,EAAD,CAAUI,OAAQoB,UCxBtCa,IAASC,OACT,cAAC,EAAD,IACAC,SAASC,eAAe,SAKxBrD,M","file":"static/js/main.3d9d17aa.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\n\r\nfunction Card({name, email, id}) {\r\n    \r\n    return (\r\n\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-s\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react'\r\nimport Card from './Card';\r\nconst CardList = ({robots}) => {\r\n    return (\r\n        <div>\r\n            { \r\n                robots.map((user)=>{\r\n                    return(\r\n                        <Card key={user.id} id={user.id} name={user.name} email={user.email}/>\r\n                    ); \r\n                })                \r\n            }           \r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react'\r\n\r\nfunction Scroll(props) {\r\n    return (\r\n        <div style={{overflowY:'scroll', border:'1px solid black', height:'400px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll\r\n","import React, { useState, useEffect } from 'react'\r\nimport CardList from './CardList'\r\n//import {robots} from './robots';\r\nimport Scroll from './Scroll'\r\nimport axios from 'axios';\r\n\r\nfunction App(){ \r\n    const [searchRobot, setSearchRobot] = useState('');\r\n    const [robots, setRobots] = useState([]);\r\n \r\n  useEffect(async () => {\r\n    const result = await axios(\r\n      'https://jsonplaceholder.typicode.com/users',\r\n    );\r\n \r\n    setRobots(result.data);\r\n  }, []);\r\n    //const [robots, setRobots] = useState([]);\r\n    const handleSearch = (e) =>{\r\n        setSearchRobot(e.target.value);\r\n        console.log(searchRobot);\r\n    }\r\n    const filterName = robots.filter(robot=>{\r\n        return robot.name.toLowerCase().includes(searchRobot.toLowerCase());\r\n    })\r\n        return (\r\n            <div className=\"tc\">\r\n                <h1>RoboFriends</h1>\r\n                <div className=\"pa2\">\r\n            <input type=\"search\" onChange={handleSearch} value={searchRobot} placeholder=\"Search Robots\" className=\"pa3 ba b--green bg-lightest-blue\"/>\r\n                </div>\r\n                <Scroll>\r\n                    <CardList robots={filterName}/>  \r\n                </Scroll>\r\n               \r\n            </div>\r\n        );\r\n   \r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport reportWebVitals from './reportWebVitals';\nimport CardList from './CardList';\nimport App from './App';\nimport {robots} from './robots';\nReactDOM.render(\n<App />,\ndocument.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}